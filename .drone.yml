---
kind: pipeline
type: docker
name: build-docker-image

steps:

  ###############
  ##  Caching  ##
  ###############
  # "cache" volume empty => create 2 DIRs
  - name: restore-cache
    image: drillster/drone-volume-cache
    settings:
      restore: true
      mount:
        - target
    volumes:
      - name: cache
        path: /cache

  # Restore cache from Docker volume called "cache"
  - name: prepare-cache
    image: busybox
    # DRONE_REPO = full repository name
    # for the current running build
    commands:
      - mkdir -p /cache/${DRONE_REPO}/target
      - mkdir -p /cache/${DRONE_REPO}/docker
    volumes:
      - name: cache
        path: /cache

  ###################
  ##  Build image  ##
  ###################
  # ...using Docker-in-Docker...
  - name: build-docker-image-branch
    pull: if-not-exists
    image: plugins/docker
    settings:
      registry: registry.digitalocean.com
      repo: registry.digitalocean.com/do-nyc-cr01/recipeappapi
      tags:
        - ${DRONE_SOURCE_BRANCH/\//-}
        - ${DRONE_SOURCE_BRANCH/\//-}-${DRONE_COMMIT_SHA:0:8}
      build_args_from_env:
        - DRONE_SOURCE_BRANCH
        - DRONE_COMMIT_SHA
      # Ensures that any existing tags are overwritten/updated
      force_tag: true
      use_cache: true
      username:
        from_secret: DO_CN_REG_USERNAME
      password:
        from_secret: DO_CN_REG_PASSWORD
    # Mount the cache volume in => /var/lib/docker
    # because that's where Docker will cache layers
    volumes:
      - name: cache
        path: /var/lib/docker
    when:
      event:
        exclude:
          - tag

  # Once the image has been built and pushed
  # successfully, we need to rebuild/update
  # the cache to ensure the new layers can be
  # fetched from it when we reference the image
  - name: rebuild-cache
    image: drillster/drone-volume-cache
    settings:
      rebuild: true
      mount:
        - target
    volumes:
      - name: cache
        path: /cache

  ############
  ##  Test  ##
  ############
  # Test image just built
  - name: test-and-linting
    image: docker/compose:1.29.2
    #environment:
    #  -
    commands:
      - docker-compose -f docker-compose-staging.yml run --rm app sh -c "python manage.py test && flake8"
    #volumes:
    #  - name: docker_socket
    #    path: /var/run/docker.sock

  # Only retrieves the metadata from the remote repository,
  # but does NOT transfer anything to your local repository.
  # It only lets you know if there are any changes
  # available since your last pull.
  - name: Fetch full git repo
    pull: if-not-exists
    image: docker:git
    commands:
      - git fetch --all
    when:
      event:
        - tag

#  - name: check-main-image
#    pull: if-not-exists
#    image: ellerbrock/alpine-bash-curl-ssl
#    commands:
#      - echo "Running on agent $DRONE_MACHINE"
#      - URL=https://api.digitalocean.com/v2/registry/do-nyc-cr01/repositories/nodejsweb/tags
#      - TAG_LIST=$(curl -s -X GET -H "Content-Type:application/json" -H "Authorization:Bearer $DO_TOKEN" $URL)
#      - echo $TAG_LIST | jq -e --arg JQ_IMAGE_TAG_VAR "$MAIN_TAG" '.tags[]|select(.tag == $JQ_IMAGE_TAG_VAR)' >/dev/null
#      - RET=$?
#      - echo "...Check if main image $REPO:$MAIN_TAG exists..."
#      - if [ "$RET" -ne 0 ]; then echo "Main image not found!"; exit 1; fi
#      - echo "Image $MAIN_TAG exists"
#      - exit 0
#    environment:
#      REPO: registry.digitalocean.com/do-nyc-cr01/nodejsweb
#      MAIN_TAG: main-${DRONE_COMMIT_SHA:0:8}
#      DO_TOKEN:
#        from_secret: DO_CN_REG_PASSWORD
#    when:
#      event:
#        - tag

  - name: check-main-image
    pull: if-not-exists
    image: appleboy/drone-ssh
    settings:
      host: 68.183.113.234
      port: 22
      user: docker1
      password:
        from_secret: DO_NYC_CI02_DOCKER1_PASSWORD
      command_timeout: 1m
      script:
        - /home/docker1/scripts/03_check_image.sh main-${DRONE_COMMIT_SHA:0:8}
    when:
      event:
        - tag

  - name: build-docker-image-tag
    pull: if-not-exists
    image: plugins/docker
    settings:
      registry: registry.digitalocean.com
      repo: registry.digitalocean.com/do-nyc-cr01/nodejsweb
      tags:
        - ci-${DRONE_TAG/\//-}
      build_args_from_env:
        - DRONE_COMMIT_SHA
        - DRONE_TAG
      build_args:
        - DRONE_SOURCE_BRANCH=main
      cache_from:
        - registry.digitalocean.com/do-nyc-cr01/nodejsweb:main-${DRONE_COMMIT_SHA:0:8}
      username:
        from_secret: DO_CN_REG_USERNAME
      password:
        from_secret: DO_CN_REG_PASSWORD
    when:
      event:
        - tag

#depends_on:
#  - spec-tests-and-linting

# ---
# kind: pipeline
# type: docker
# name: deploy-branch-to-remote-host

# steps:
#   - name: create-subdomain-and-run-app
#     pull: if-not-exists
#     image: appleboy/drone-ssh
#     settings:
#       host: 68.183.113.234
#       port: 22
#       user: docker1
#       password:
#         from_secret: DO_NYC_CI02_DOCKER1_PASSWORD
#       command_timeout: 2m
#       script:
#         - /home/docker1/scripts/01_create-subdomain.sh ${DRONE_SOURCE_BRANCH/\//-}-${DRONE_COMMIT_SHA:0:8}
#         - /home/docker1/scripts/02_run-app.sh ${DRONE_SOURCE_BRANCH/\//-}-${DRONE_COMMIT_SHA:0:8}
#     when:
#       event:
#         exclude:
#           - tag

# depends_on:
#   - build-docker-image

# trigger:
#   event:
#     exclude:
#       - tag


#---
#kind: pipeline
#type: docker
#name: deploy-tag

#steps:
#agganciare immagine all'attuale container di produzione
#ri-avviare il container con la nuova immagine di produzione

#depends_on:
#  - build-docker-image-tag
#
#trigger:
#  event:
#    - tag


###############
##  Volumes  ##
###############
volumes:
- name: cache
  host:
    path: /var/cache
- name: target
  host:
    path: /var/cache/${DRONE_REPO}/target
- name: docker
  host:
    path: /var/cache/${DRONE_REPO}/docker
#- name: docker_socket
#  host:
#    path: /var/run/docker.sock


################
##  Services  ##
################
# Services start automatically:
# - after the clone step;
# - before any other step in pipeline.
# This DB stays running during the whole
# pipeline and can be accessed using:
# DB_HOST=postgres-test-db
services:
  - name: postgres-test-db
    image: postgres:13-alpine
    ports:
      - 5432
    environment:
      POSTGRES_DB: devdb
      POSTGRES_USER: devuser
      POSTGRES_PASSWORD: SuperSecretPassword
